---
replicaCount: 1
image:
  repository: "118146679784.dkr.ecr.eu-west-1.amazonaws.com/hybrid-ingestion-runner"
  tag: "1.10.0"
  pullPolicy: IfNotPresent
# Image Pull Secrets https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
imagePullSecrets: []
# Additional environment variables for the hybrid runner container
extraEnvs: []
# Additional envFrom entries for the hybrid runner container
envFrom: []
service:
  port: 8585
  metricsPort: 8989
config:
  # Runner identifier that will be assigned to an ingestion pipeline
  agentId: "RemoteRunner"
  # The token used to authenticate with the Collate server
  authToken: ""
  # The secret used to authenticate with the Collate server. Only used if `authToken` is not set.
  #authTokenSecret:
  #  name: "my-secret"
  #  key: "my-key"
  # The Collate server host (without the protocol)
  serverHost: "my-cluster.getcollate.io"
  # The Secrets Manager to use
  # secretsManager: "managed-aws" # To use AWS Secrets Manager. This is the only supported option for now.
  secretsManager: "kubernetes"
  # The delay between reconnection attempts
  # reconnectDelaySeconds: "5"
  # The following section applies for Argo Workflows configuration
  ingestionPods:
    # Ingestion Pods' namespace default value is the Helm Chart namespace
    # namespace: "another-namespace"
    # Repository and tag for the Argo ingestion pod image
    repository: "118146679784.dkr.ecr.eu-west-1.amazonaws.com/collate-customers-ingestion-slim-eu-west-1"
    tag: "om-1.10.0-cl-1.10.0"
    # Image Pull Secrets for the ingestion pod image (comma separated string)
    imagePullSecrets: "omd-registry-credentials"
    # disableVersionValidation: ""
    # https://argoproj.github.io/argo-workflows/service-accounts/
    serviceAccount:
      create: true
      name: "ingestion"
      # annotations: {}
      # automount: true
    # customerToleration: ""
    # If `false`, we will disable the Service Account automount and pass it by hand (argo workflows internally will handle this)
    # autoMountSAToken: ""
    # Resources configuration
    resources:
      limits:
        cpu: "1000m"
        memory: "4096Mi"
      requests:
        cpu: "1000m"
        memory: "4096Mi"
    # Automation Workflow Resources configuration
    automationResources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "200m"
        memory: "256Mi"
    # Pass any extra environment variables to the running pods, as `[key1:value1,key2:value2,...]`
    extraEnvs: []
  argoWorkflows:
    # The endpoint (host:port) of the Argo Workflows server
    endpoint: ""
    # backoff retry time in seconds to test the connection
    # backOffTime: ""
    # SSL to connect to the Argo Server
    # certificatePath: ""
    # Delete the workflows after #seconds. By default, we'll keep workflows for 1 week
    # secondsAfterCompletionTTL: ""
serviceAccount:
  create: true
  annotations: {}
  automount: true
# Service monitor for Prometheus metrics
serviceMonitor:
  enabled: false
  interval: 30s
  annotations: {}
  labels: {}
nodeSelector: {}
tolerations: []
affinity: {}
ecrRegistryHelper:
  # Enable the ECR Registry Helper CronJob
  enabled: true
  # Schedule in Cron format
  schedule: "0 0/6 * * *" # Every 6 hours
  image:
    repository: "public.ecr.aws/r2h3l6e4/awscli-kubectl"
    tag: "latest"
    pullPolicy: "IfNotPresent"
  # Service Account for the ECR Registry Helper CronJob
  serviceAccount:
    create: true
    name: "omd-pull-secret-refresh"
    annotations: {}
  # Resources configuration for the ECR Registry Helper CronJob
  resources:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  collateCredentials:
    # You can provide the AWS credentials either via `value` or `secretRef` to an existing Kubernetes Secret
    # If both are provided, `secretRef` will take precedence
    # Example of `secretRef`:
    # The secret value should have the following keys - AWS_SECRET_ACCESS_KEY, AWS_ACCESS_KEY_ID, AWS_ACCOUNT
    secretRef: ""
    values:
      accessKeyId: ""
      secretAccessKey: ""
      account: "118146679784"

# Argo Workflows Helm Chart values
# See https://argoproj.github.io/argo-helm/
argoWorkflows:
  enabled: false

argo-workflows:
  fullnameOverride: "argo-workflows"
  crds:
    install: true
  controller:
    serviceAccount:
      create: true
      name: "argo-workflows-controller-sa"
  server:
    serviceAccount:
      create: true
      name: "argo-workflows-server-sa"
    extraArgs: 
    - "--auth-mode=client"
  artifactRepository:
    archiveLogs: false
