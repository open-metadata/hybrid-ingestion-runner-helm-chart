---
replicaCount: 1

image:
  repository: "118146679784.dkr.ecr.eu-west-1.amazonaws.com/hybrid-ingestion-runner"
  tag: "1.8.6"
  pullPolicy: IfNotPresent

# Image Pull Secrets https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
imagePullSecrets:
  - name: ""

service:
  port: 8585

config:
  # Runner identifier that will be assigned to an ingestion pipeline
  agentId: "RemoteRunner"
  # The token used to authenticate with the Collate server
  authToken: ""
  # The URL of the Collate server
  serverUrl: "wss://my-cluster.getcollate.io"
  # The URL of the Collate server API
  serverHostApiUrl: "https://my-cluster.getcollate.io/api"
  # The Secrets Manager to use
  # secretsManager: "managed-aws" # To use AWS Secrets Manager. This is the only supported option for now.
  secretsManager: ""
  # The delay between reconnection attempts
  # reconnectDelaySeconds: "5"
  # The following section applies for Argo Workflows configuration
  ingestionPods:
    # Ingestion Pods' namespace default value is the Helm Chart namespace
    # namespace: "another-namespace"
    baseImage: "118146679784.dkr.ecr.eu-west-1.amazonaws.com/collate-customers-ingestion-slim-eu-west-1:om-1.8.6-cl-1.8.6"
    # Image Pull Secrets for the baseImage (comma separated string) https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    # imagePullSecrets: ""
    # disableVersionValidation: ""
    # https://argoproj.github.io/argo-workflows/service-accounts/
    serviceAccount:
      create: true
      name: "ingestion"
      # annotations: {}
      # automount: true
    # customerToleration: ""
    # If `false`, we will disable the Service Account automount and pass it by hand (argo workflows internally will handle this)
    # autoMountSAToken: ""
    # Resources configuration
    resources:
      limits:
        cpu: "1000m"
        memory: "4096Mi"
      requests:
        cpu: "1000m"
        memory: "4096Mi"
    # Automation Workflow Resources configuration
    automationResources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "200m"
        memory: "256Mi"
    # Pass any extra environment variables to the running pods, as `[key1:value1,key2:value2,...]`
    extraEnvs: []
  argoWorkflows:
    # The endpoint (host:port) of the Argo Workflows server
    endpoint: ""
    # backoff retry time in seconds to test the connection
    # backOffTime: ""
    # SSL to connect to the Argo Server
    # certificatePath: ""
    # Delete the workflows after #seconds. By default, we'll keep workflows for 1 week
    # secondsAfterCompletionTTL: ""
serviceAccount:
  create: true
  annotations: {}
  automount: true

# Service monitor for Prometheus metrics
serviceMonitor:
  enabled: false
  interval: 30s
  annotations: {}
  labels: {}

nodeSelector: {}

tolerations: []

affinity: {}
