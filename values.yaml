---
replicaCount: 1

image:
  repository: ""
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: ""

service:
  port: 8585

config:
  agentId: ""                                    # Agent identifier that will be assigned to an ingestion pipeline
  pipelineServiceClientEndpoint: ""              # The host of the Argo Workflows server
  authToken: ""                                  # The token used to authenticate with the Collate server
  serverUrl: "https://my-cluster.getcollate.io"  # The URL of the Collate server
  reconnectDelaySeconds: "5"                     # The delay between reconnection attempts

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  automount: true

pipelineServiceClientConfiguration:
  # The token used to authenticate with the Argo Workflows server, e.g., eyJhbGciOiJSUzI1NiIsImtpZCI6IjlyQTZ4S3...
  token: ""
  namespace: "{{ include \"hybrid-ingestion-agent.namespace\" . }}"
  baseImage: "openmetadata/ingestion-base:1.6.0"
  disableVersionValidation: ""
  # backoff retry time in seconds to test the connection
  backOffTime: ""
  # https://argoproj.github.io/argo-workflows/service-accounts/
  serviceAccountName: ""
  customerToleration: ""
  # Image Pull Secrets https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  imagePullSecrets: ""
  # SSL to connect to the Argo Server
  certificatePath: ""
  # If `false`, we will disable the Service Account automount and pass it by hand (argo workflows internally will handle this)
  autoMountSAToken: ""
  # Delete the workflows after #seconds. By default, we'll keep workflows for 1 week
  secondsAfterCompletionTTL: ""
  # Resources configuration
  resources:
    limits:
      cpu:  "1000m"
      memory: "4096Mi"
    requests:
      cpu: "200m"
      memory: "256Mi"
  # Automation Workflow Resources configuration
  automationResources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "200m"
      memory: "256Mi"
  # Pass any extra environment variables to the running pods, as `[key1:value1,key2:value2,...]`
  extraEnvs: ${ARGO_EXTRA_ENVS:-[]}
